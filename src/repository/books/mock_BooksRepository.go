// Code generated by mockery. DO NOT EDIT.

package books

import (
	model "github.com/BieLuk/library-backend/src/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockBooksRepository is an autogenerated mock type for the BooksRepository type
type MockBooksRepository struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: book
func (_m *MockBooksRepository) CreateBook(book *model.Book) (*model.Book, error) {
	ret := _m.Called(book)

	var r0 *model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Book) (*model.Book, error)); ok {
		return rf(book)
	}
	if rf, ok := ret.Get(0).(func(*model.Book) *model.Book); ok {
		r0 = rf(book)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Book) error); ok {
		r1 = rf(book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: bookID
func (_m *MockBooksRepository) GetBook(bookID uuid.UUID) (*model.Book, error) {
	ret := _m.Called(bookID)

	var r0 *model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.Book, error)); ok {
		return rf(bookID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.Book); ok {
		r0 = rf(bookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *MockBooksRepository) GetBooks() ([]*model.Book, error) {
	ret := _m.Called()

	var r0 []*model.Book
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Book, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Book)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBooksRepository creates a new instance of MockBooksRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBooksRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBooksRepository {
	mock := &MockBooksRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
