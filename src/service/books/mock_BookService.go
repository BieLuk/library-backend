// Code generated by mockery. DO NOT EDIT.

package books

import (
	dto "github.com/BieLuk/library-backend/src/dto"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockBookService is an autogenerated mock type for the BookService type
type MockBookService struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: request
func (_m *MockBookService) CreateBook(request dto.CreateBookRequest) (*dto.CreateBookResponse, error) {
	ret := _m.Called(request)

	var r0 *dto.CreateBookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateBookRequest) (*dto.CreateBookResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateBookRequest) *dto.CreateBookResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateBookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.CreateBookRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: ID
func (_m *MockBookService) GetBook(ID uuid.UUID) (*dto.GetBookResponse, error) {
	ret := _m.Called(ID)

	var r0 *dto.GetBookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*dto.GetBookResponse, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *dto.GetBookResponse); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetBookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *MockBookService) GetBooks() (*dto.GetBooksResponse, error) {
	ret := _m.Called()

	var r0 *dto.GetBooksResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*dto.GetBooksResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *dto.GetBooksResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetBooksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockBookService creates a new instance of MockBookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookService {
	mock := &MockBookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
